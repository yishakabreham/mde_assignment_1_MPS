package mps.sales.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Transaction_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xd2c82ff21fca47a9L, 0x9cebb491a324c870L, 0x74c6770040fbc5dfL, "mps.sales.structure.Transaction");

  public static final Rule<ContainmentContext> check_id1573918533906089779 = new Rule_NumberOfChars();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id1573918533906089779));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_NumberOfChars extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:97000a1c-5b45-48b0-a786-d6b86c9fbab0(mps.sales.constraints)/1573918533906089779");
    public static final RuleId ID_NumberOfChars = new RuleId(1573918533906089779L, SOURCE_NODE_REF);

    public Rule_NumberOfChars() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_NumberOfChars, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return isEmptyString(SPropertyOperations.getString(context.getChildNode(), PROPS.transactionNumber$uhR0));
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
    private static boolean isEmptyString(String str) {
      return str == null || str.isEmpty();
    }
  }

  /*package*/ Transaction_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class PROPS {
    /*package*/ static final SProperty transactionNumber$uhR0 = MetaAdapterFactory.getProperty(0xd2c82ff21fca47a9L, 0x9cebb491a324c870L, 0x74c6770040fbc5dfL, 0x74c6770040fc2694L, "transactionNumber");
  }
}
